#Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
#The algorithm for myAtoi(string s) is as follows:
# 1.Read in and ignore any leading whitespace.
# 2.Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. 
    Assume the result is positive if neither is present.
# 3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
# 4. Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
# 5. If the integer is out of the 32-bit signed integer range [-2pow(31), 2pow(31) - 1], then clamp the integer so that it remains in the range. 
     Specifically, integers less than -2(31) should be clamped to -2(31), and integers greater than 2(31) - 1 should be clamped to 2(31) - 1.
# 6. Return the integer as the final result.



class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.lstrip()
        if not s:
            return 0
        sign = 1
        if s[0] == '-':
            sign = -1
            s = s[1:]
        elif s[0] == '+':
            s = s[1:]
        result = 0
        for char in s:
            if char.isdigit():
                result = result * 10 + int(char)
            else:
                break
        result *= sign
        INT_MIN, INT_MAX = -2**31, 2**31 - 1
        if result < INT_MIN:
            return INT_MIN
        elif result > INT_MAX:
            return INT_MAX
        else:
            return result
solution = Solution()
user_input = input("Enter a string to convert to an integer")
result = solution.myAtoi(user_input)
print(f"Converted integer: {result}")
